doctype html
html
	head
		title #{title}
		link(rel='stylesheet' href='https://unpkg.com/leaflet@1.4.0/dist/leaflet.css')
		link(rel='stylesheet', href='/css/style.css')
		script(src='https://unpkg.com/leaflet@1.4.0/dist/leaflet.js')
		meta(name="viewport" content="width=device-width, initial-scale=1")
	body
	main
	#map
	script.
		var t;
		var osmUrl='http://{s}.www.toolserver.org/tiles/bw-mapnik/{z}/{x}/{y}.png';
		var osmAttrib='Map data © <a href="http://openstreetmap.org">OpenStreetMap</a> contributors';
		var osm = new L.TileLayer(osmUrl, {minZoom: 0, maxZoom: 20, attribution: osmAttrib});
		map = L.map('map', {center: [46.5, 6.4194],layers: osm,zoom: 6.45,zoomControl:false});
		var data = !{data}
	
		var ranger = L.control({position: 'bottomleft'});

		ranger.onAdd = function (map) {

		    var div = L.DomUtil.create('div', 'ranger legend')

		    div.innerHTML += '<div class="slidecontainer"><input class="slider" id="myRange" type="range" min="1" max="12" value="1" /></div>'
		    return div;
		};





		var legend = L.control({position: 'bottomright'});
		legend.onAdd = function (map) {

		    var div = L.DomUtil.create('div', 'info legend'),
		        grades = [0, 100, 250, 500, 750, 1000, 1250, 1500,1750],
		        labels = [];

		    // loop through our density intervals and generate a label with a colored square for each interval
		    for (var i = 0; i < grades.length; i++) {
		        div.innerHTML +=
		            '<i style="background:' + getColor(grades[i] + 1) + '"></i> ' +
		            grades[i] + (grades[i + 1] ? '&ndash;' + grades[i + 1] + '<br>' : '+');
		    }

		    return div;
		};
		var info = L.control();

		info.onAdd = function (map) {
		    this._div = L.DomUtil.create('div', 'info');
		    this.update();
		    return this._div;
		};

		info.update = function (props) {
		    this._div.innerHTML = '<h4>Téléchargement depuis la semaine du</h4>' +  (props ?
		        props
		        : 'Survolez une zone');
		};

		info.addTo(map);
		legend.addTo(map);
		ranger.addTo(map);
		var range = document.getElementById('myRange')
		range.oninput = function(){console.log(reload_map(this.value-1))}


		function getColor(d) {
		    return	d > 1750 ? '#004529' :
					d > 1500 ? '#006837' :
					d > 1250  ? '#238443' :
					d > 1000  ? '#41ab5d' :
					d > 750  ? '#78c679' :
					d > 500  ? '#addd8e' :
					d > 250  ? '#d9f0a3' :
					d > 100   ? '#f7fcb9' :
								'#ffffe5';
		}
		function highlightFeature(e) {
		    info.update(e.target.uses__[t]);
		}
		function clicke(e) {
		    console.log(e.target);
		    //window.location='/graphe?id='+e.target.id__;
		}
		function resetHighlight(e) {
		    info.update();
		}

		function reload_map(t)
		{
			clearMap()
			dataOnMap(t)

		}

		function clearMap() {
		    for(i in map._layers) {
		        if(map._layers[i]._path != undefined) {
		            try {
		                map.removeLayer(map._layers[i]);
		            }
		            catch(e) {
		                console.log("problem with " + e + map._layers[i]);
		            }
		        }
		    }
		}

		function dataOnMap(t)
		{
			t=t
			for (i = 0; i < data.donnes.length; i++) { 		  
				var polygon = L.polygon(data.donnes[i].pts)
				.setStyle({color :  'white',fillColor :getColor(data.donnes[i].use[t]),weight : 0.7,fillOpacity: 0.37})
				.addTo(map)
				.bindPopup(data.donnes[i].use[t].toString())
				.on({mouseover: highlightFeature,mouseout: resetHighlight,click : clicke})
				polygon.id__ = data.donnes[i].id;
				polygon.uses__ = data.donnes[i].use[t];
			}
		}

		
		