doctype html
html
	head
		title #{title}
		link(rel='stylesheet' href='https://unpkg.com/leaflet@1.4.0/dist/leaflet.css')
		link(rel='stylesheet', href='/css/style.css')
		script(src='https://unpkg.com/leaflet@1.4.0/dist/leaflet.js')
		meta(name="viewport" content="width=device-width, initial-scale=1")
	body
	main
	#map
	script.
		function getColor(d) {
		    return d > 1500 ? '#800026' :
		           d > 1250  ? '#BD0026' :
		           d > 1000  ? '#E31A1C' :
		           d > 750  ? '#FC4E2A' :
		           d > 500  ? '#FD8D3C' :
		           d > 250  ? '#FEB24C' :
		           d > 100   ? '#FED976' :
		                      '#FFEDA0';
		}
		var osmUrl='http://{s}.www.toolserver.org/tiles/bw-mapnik/{z}/{x}/{y}.png';
		var osmAttrib='Map data © <a href="http://openstreetmap.org">OpenStreetMap</a> contributors';
		// Create variable to hold map element, give initial settings to map
		var osm = new L.TileLayer(osmUrl, {minZoom: 0, maxZoom: 20, attribution: osmAttrib});
		// Add OpenStreetMap tile layer to map element
		map = L.map('map', {center: [46.5, 6.4194],layers: osm,zoom: 6.45,zoomControl:false});
		var data = !{data}
		console.log(data)
		for (i = 0; i < data.donnes.length; i++) { 		  
		  var polygon = L.polygon(data.donnes[i].pts).setStyle({color :  'white',fillColor :getColor(data.donnes[i].use),weight : 2,fillOpacity: 0.37}).addTo(map).bindPopup(data.donnes[i].use.toString()).on({mouseover: highlightFeature,mouseout: resetHighlight,click : clicke})
		  polygon.donne = data.donnes[i];
		}
		function highlightFeature(e) {
		    info.update(e.target._popup._content);
		}
		function clicke(e) {
		    console.log(e.target.donne.id);
		    window.location='/graphe?id='+e.target.donne.id;
		}
		function resetHighlight(e) {
		    info.update();
		}
		var legend = L.control({position: 'bottomright'});
		legend.onAdd = function (map) {

		    var div = L.DomUtil.create('div', 'info legend'),
		        grades = [0, 100, 250, 500, 750, 1000, 1250, 1500],
		        labels = [];

		    // loop through our density intervals and generate a label with a colored square for each interval
		    for (var i = 0; i < grades.length; i++) {
		        div.innerHTML +=
		            '<i style="background:' + getColor(grades[i] + 1) + '"></i> ' +
		            grades[i] + (grades[i + 1] ? '&ndash;' + grades[i + 1] + '<br>' : '+');
		    }

		    return div;
		};
		var info = L.control();

		info.onAdd = function (map) {
		    this._div = L.DomUtil.create('div', 'info'); // create a div with a class "info"
		    this.update();
		    return this._div;
		};

		// method that we will use to update the control based on feature properties passed
		info.update = function (props) {
		    this._div.innerHTML = '<h4>Téléchargement depuis la semaine dernière</h4>' +  (props ?
		        props
		        : 'Survolez une zone');
		};

		info.addTo(map);

		legend.addTo(map);
		